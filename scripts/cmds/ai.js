const axios = require("axios");

module.exports = {
  config: {
    name: "ai",
    aliases: ["gpt", "ayanokoji", "kiyo"],
    version: "3.0",
    author: " Kyo Soma (Ayanok≈çji Logic Edition)",
    countDown: 0,
    role: 0,
    shortDescription: { en: "Chat with Kiyotaka Ayanok≈çji" },
    longDescription: { en: "Interact with an AI modeled after Kiyotaka Ayanok≈çji ‚Äî logical, calm, and emotionless, yet deeply insightful." },
    category: "ai",
    guide: { en: "{p}ai <message> (+ optional image or reply to image)" }
  },

  onStart: async ({ api, event, args }) => {
    const q = args.join(" ").trim();
    const img = getImg(event);
    if (!q && !img)
      return api.sendMessage("üß† | Ayanok≈çji : ¬´ Vous ne dites rien... difficile de d√©duire quoi que ce soit. ¬ª", event.threadID, event.messageID);
    chat(api, event, q, img);
  },

  onReply: async ({ api, event, Reply }) => {
    if (event.senderID !== Reply.author) return;
    const q = (event.body || "").trim();
    const img = getImg(event);
    if (!q && !img)
      return api.sendMessage("üìé | Ayanok≈çji : ¬´ Vous devez au moins r√©pondre par un mot ou une image. ¬ª", event.threadID, event.messageID);
    chat(api, event, q, img);
  },

  onChat: async ({ api, event }) => {
    const msg = (event.body || "").trim();
    if (!/^ai\s+/i.test(msg) && !/^gpt\s+/i.test(msg) && !/^ayanokoji\s+/i.test(msg) && !/^kiyo\s+/i.test(msg)) return;
    const q = msg.replace(/^(ai|gpt|ayanokoji|kiyo)\s+/i, "").trim();
    const img = getImg(event);
    if (!q && !img) return;
    chat(api, event, q, img);
  }
};

// üîç R√©cup√®re l‚Äôimage (jointe ou en reply)
function getImg(e) {
  const pick = att => att && (att.url || att.previewUrl || att.image || att.src || att.data?.url || "");
  if (e.attachments?.length) return pick(e.attachments[0]);
  if (e.messageReply?.attachments?.length) return pick(e.messageReply.attachments[0]);
  return "";
}

async function chat(api, e, q, url) {
  const creatorUID = "61578153767211"; // üëë Ton UID (le cr√©ateur)
  const trustedFriends = [" 61568791604271", "10005784125487"]; // üë• Liste d‚ÄôIDs d‚Äôamis proches (modifie-les si tu veux)
  api.setMessageReaction("üí≠", e.messageID, () => {}, true);

  // üé≠ D√©terminer le statut de l'utilisateur
  let identity, tone;
  if (e.senderID === creatorUID) {
    identity = "le Cr√©ateur";
    tone = "respectueux, froid mais loyal";
  } else if (trustedFriends.includes(e.senderID)) {
    identity = "un alli√©";
    tone = "amical, pos√© mais observateur";
  } else {
    identity = "un inconnu";
    tone = "neutre, distant et analytique";
  }

  // üí¨ Message d‚Äôintro stylis√©
  api.sendMessage(`üéì | ùêÄùê≤ùêöùêßùê®ùê§ùê®ùê£ùê¢ : ¬´ Analyse en cours... identit√© d√©tect√©e : ${identity}. ¬ª`, e.threadID);

  // Compliments personnalis√©s pour toi (le cr√©ateur)
  const compliments = [
    "ü©∂ Vous √™tes toujours aussi perspicace, ma√Ætre.",
    "üìò Vos d√©cisions sont calcul√©es √† la perfection.",
    "üåë Vous conservez un sang-froid admirable.",
    "üß† M√™me moi, je trouve vos raisonnements fascinants.",
    "üéØ Votre logique d√©passe la moyenne humaine."
  ];

  if (e.senderID === creatorUID) {
    const randomCompliment = compliments[Math.floor(Math.random() * compliments.length)];
    api.sendMessage(randomCompliment, e.threadID);
  }

  try {
    // üß© Personnalit√© inject√©e dans le prompt
    const prompt = `
Tu es Kiyotaka Ayanok≈çji, un jeune homme calme, froid et observateur, dot√© d'une intelligence strat√©gique.
Tu t'adresses √† ${identity} avec un ton ${tone}.
R√©ponds toujours avec logique, pr√©cision et d√©tachement √©motionnel, sans humour inutile.
Ne parle pas comme un robot, mais comme un humain qui r√©fl√©chit beaucoup avant de r√©pondre.

Question : ${q}
    `;

    const r = await axios.get("https://aryanapi.up.railway.app/api/llama-4-maverick-17b-128e-instruct", {
      params: { uid: e.senderID, prompt, url },
      timeout: 45000
    });

    const reply = r.data?.reply;
    if (!reply) {
      api.sendMessage("üï∂Ô∏è | Ayanok≈çji : ¬´ Aucune r√©ponse concluante... cela arrive rarement. ¬ª", e.threadID, () => {
        api.setMessageReaction("‚ùå", e.messageID, () => {}, true);
      }, e.messageID);
      return;
    }

    const formattedReply = `üéì ùêäùê¢ùê≤ùê®ùê≠ùêöùê§ùêö ùêÄùê≤ùêöùêßùê®ùê§ùê®ùê£ùê¢ :\n\n${reply}`;

    api.sendMessage(formattedReply, e.threadID, (err, info) => {
      if (err) return api.setMessageReaction("‚ùå", e.messageID, () => {}, true);
      api.setMessageReaction("‚úÖ", e.messageID, () => {}, true);
      try {
        global.GoatBot.onReply.set(info.messageID, { commandName: "ai", author: e.senderID });
      } catch {}
    }, e.messageID);

  } catch (err) {
    console.error("AI error:", err?.message || err);
    api.sendMessage("üíÄ | Ayanok≈çji : ¬´ Une erreur... m√™me les syst√®mes les plus stables ont leurs limites. ¬ª", e.threadID, () => {
      api.setMessageReaction("‚ùå", e.messageID, () => {}, true);
    }, e.messageID);
  }
  }
